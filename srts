import re
from tkinter.messagebox import NO
import numpy as np
import pytesseract
import cv2
from PIL import Image
import imutils
import io
from scipy.ndimage import interpolation as inter
pytesseract.pytesseract.tesseract_cmd = r'C:/Program Files/Tesseract-OCR/tesseract.exe'

def image_correction(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    gray = cv2.resize(gray, (1500, 2000))
    #preprocess image for best result
    rectKernel = cv2.getStructuringElement(cv2.MORPH_RECT, (115, 10))
    blur = cv2.medianBlur(gray, 5)
    blackhat = cv2.morphologyEx(blur, cv2.MORPH_BLACKHAT, rectKernel)
    grad = cv2.Sobel(blackhat, ddepth=cv2.CV_32F, dx=1, dy=0, ksize=-1)
    grad = np.absolute(grad)
    (minVal, maxVal) = (np.min(grad), np.max(grad))
    grad = (grad - minVal) / (maxVal - minVal)
    grad = (grad * 255).astype("uint8")
    grad = cv2.morphologyEx(grad, cv2.MORPH_CLOSE, rectKernel)
    thresh = cv2.threshold(grad, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]
    return thresh

def correct_skew1(image, delta=0.6, limit=5):
    #score
    def determine_score(arr, angle):
        data = inter.rotate(arr, angle, reshape=False, order=0)
        histogram = np.sum(data, axis=1)
        score = np.sum((histogram[1:] - histogram[:-1]) ** 2)
        return histogram, score

    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY_INV + cv2.THRESH_OTSU)[1] 

    #find image angle
    scores = []
    angles = np.arange(-limit, limit + delta, delta)
    for angle in angles:
        _, score = determine_score(thresh, angle)
        scores.append(score)

    best_angle = angles[scores.index(max(scores))]

    #rotate image 
    (h, w) = image.shape[:2]
    center = (w // 2, h // 2)
    M = cv2.getRotationMatrix2D(center, best_angle, 1.0)
    rotated = cv2.warpAffine(image, M, (w, h), flags=cv2.INTER_CUBIC, \
              borderMode=cv2.BORDER_REPLICATE)

    return rotated

def recongnize(image, thresh):
    image = cv2.resize(image, (1500, 2000))
    allContours = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)   
    allContours = imutils.grab_contours(allContours)[::-1]
    #find block of text
    idx = 0
    for contour in allContours:
            print(contour)
            x,y,w,h = cv2.boundingRect(contour)
            if w > 100:
                idx+=1
                # image = cv2.rectangle(image, (x-20, y-10), (x + w, y + h + 5), (0,0,0), 2)
                cv2.putText(image, f'{idx}', (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (36,255,12), 2)
                img2 = image[y-10:y+h+5, x-20:x+w]
                rotated = correct_skew1(img2, 0.6, 10)
                rotated = cv2.resize(rotated, (1200, 100), fx=0.5, fy=0.5)
                gray = cv2.cvtColor(rotated, cv2.COLOR_BGR2GRAY)
                dst = cv2.fastNlMeansDenoising(gray, 3, 5, None, 20)
                blur = cv2.medianBlur(dst, 3)
                thresh1 = cv2.threshold(blur, 0, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)[1]
                cv2.imshow('s',thresh1)
                cv2.waitKey(0)
                cv2.destroyAllWindows()
                for i in range(3,14):
                    print(f'PSM: {i}')
                    print(pytesseract.image_to_string(thresh1,
                                                    config = f'--psm {i} --oem 3 -l eng+rus'))
                # filename = 'C:Games/STS/box/ss/file_%i.jpg'%idx
                # cv2.imwrite(filename, rotated)
    return image
            

img = cv2.imread('C:\Games\STS\sts/39.png')

image= cv2.resize(img, (800, 1200))

blur = cv2.medianBlur(image, 9)

edged = cv2.Canny(blur, 35, 210, 4)

accumEdged = np.zeros(image.shape[:2], dtype="uint8")

accumEdged = cv2.bitwise_or(accumEdged, edged)

contours, _ = cv2.findContours(accumEdged, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

idx = 0 
for con in contours:
    x,y,w,h = cv2.boundingRect(con)
    if len(con) > 2000:
        print(len(con), x,y,w,h)
        idx+=1
        new_image = image[y-5:y+h-5, x-5:x+w-5]

thresh = image_correction(new_image)

cropn = recongnize(new_image,thresh)

cv2.imwrite('C:\Games\STS/box/2.jpeg',cropn)
cv2.waitKey(0)
cv2.destroyAllWindows()